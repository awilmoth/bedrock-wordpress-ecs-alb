AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ecsServiceRole:
    Type: String
  HostedZone:
    Type: String
  Hostname:
    Type: String
  ECSCluster:
    Type: String
  SSLCertificateArn:
    Type: String
  ELBSubnet1:
    Type: String
  ELBSubnet2:
    Type: String
  TargetGroupVPC:
    Type: String
  AppName:
    Description: "Name of the application"
    Type: String
    AllowedPattern: "[a-z0-9-]+"
    ConstraintDescription: "must only contain lowercase letters, numbers and hyphens"
  DesiredCount:
    Description: "Desired number of running containers"
    Type: String
    Default: "2"
  DockerImage:
    Description: "Docker image to use (including tag)"
    Type: String
  DbHost:
    Description: "Database server hostname"
    Type: String
  DbName:
    Description: "Name of the database"
    Type: String
  DbUsername:
    Description: "Database username"
    Type: String
  DbPassword:
    Description: "Database password"
    Type: String
    NoEcho: 'true'
  Memory:
    Description: "Max allocated memory for a container"
    Type: Number
    Default: 1000
  MemoryReservation:
    Description: "Runtime memory for a container"
    Type: Number
    Default: 300

Resources:
  ##
  # ECS task & service
  ##
  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - StorageUserAccessKey
    Properties:
      ContainerDefinitions:
        - Name: web
          Essential: 'true'
          Image: !Ref DockerImage
          Memory: !Ref Memory
          MemoryReservation: !Ref MemoryReservation
          Privileged: 'true'
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: web
          Environment:
            - Name: WORDPRESS_DB_HOST
              Value: !Ref DbHost
            - Name: WORDPRESS_DB_NAME
              Value: !Ref DbName
            - Name: WORDPRESS_DB_USER
              Value: !Ref DbUsername
            - Name: WORDPRESS_DB_PASSWORD
              Value: !Ref DbPassword
      Family: !Ref AWS::StackName

  WebService:
    Type: AWS::ECS::Service
    DependsOn:
      - TargetGroup
      - WebTaskDefinition
      - HttpListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: 600
      LoadBalancers:
        - ContainerName: web
          ContainerPort: '80'
          TargetGroupArn: !Ref TargetGroup
      Role: !Ref ecsServiceRole
      TaskDefinition: !Ref WebTaskDefinition
  ##
  # Log group
  ##
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 30

  ##
  # Uploads storage
  ##
  Storage:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: "Delete old backup versions after 30 days"
            NoncurrentVersionExpirationInDays: 30
            Status: Enabled
  StorageBucketPolicyPublic:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Storage
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "s3:GetObject"
            Effect: "Allow"
            Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref Storage, '/uploads/*' ] ]
            Principal: "*"
  StorageTopic:
    Type: AWS::SNS::Topic
  StorageUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: yas3fs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:AbortMultipartUpload
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListMultipartUploadParts
                  - s3:PutObject
                  - s3:RestoreObject
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  - !Join [ '', [ 'arn:aws:s3:::', !Ref Storage ] ]
                  - !Join [ '', [ 'arn:aws:s3:::', !Ref Storage, '/*' ] ]
              - Action:
                  - sns:ConfirmSubscription
                  - sns:GetTopicAttributes
                  - sns:Publish
                  - sns:Subscribe
                  - sns:Unsubscribe
                Effect: Allow
                Resource: !Ref StorageTopic
              - Action: sqs:*
                Effect: Allow
                Resource: !Join [ '', [ 'arn:aws:sqs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':yas3fs-*' ] ]
  StorageUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref StorageUser
  ##
  # Load Balancer
  ##

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref TargetGroupVPC
      GroupDescription: Access to the load balancer that sits in front of ECS

  ALBSecurityGroupInHttpWorld:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: "0.0.0.0/0"

  ALBSecurityGroupInHttpsWorld:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: "0.0.0.0/0"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: 'internet-facing'
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Subnets:
      - !Ref ELBSubnet1
      - !Ref ELBSubnet2

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - LoadBalancer
    Properties:
      Protocol: HTTP
      Port: '32806'
      VpcId: !Ref TargetGroupVPC
      HealthCheckPath: "/"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 20

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: '80'
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  ##
  # DNS record
  ##
  DNSRecord:
    Type: AWS::Route53::RecordSetGroup
    DependsOn:
      - LoadBalancer
    Properties:
      HostedZoneId: !Ref HostedZone
      Comment: The record set that directs traffic to the load balancer
      RecordSets:
       - Name: !Sub "${Hostname}."
         Type: "A"
         AliasTarget:
           HostedZoneId: "Z35SXDOTRQ7X7K"
           DNSName: !GetAtt LoadBalancer.DNSName